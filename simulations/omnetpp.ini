[General]
network = PPNet
**.logger = true
sim-time-limit = 600s

# Random Number Generators
num-rngs = 4
seed-set = ${repetition}
*.producerLow.rng-0 = 0
*.producerLow.rng-1 = 1
*.producerHigh.rng-0 = 2
*.producerHigh.rng-1 = 3

#Initial Tests with different combinations of values 
[Config Initial_Constant]
**.arrivalDistribution = 0
**.serviceDistribution = 0
**.producerLow.arrivalMean = ${0.1, 10}
**.producerHigh.arrivalMean = ${0.1, 10}
**.producerLow.serviceMean = ${0.1, 10}
**.producerHigh.serviceMean = ${0.1, 10}

[Config Initial_Exponential]
**.arrivalDistribution = 1
**.serviceDistribution = 1
**.producerLow.arrivalMean = ${0.1, 10}
**.producerHigh.arrivalMean = ${0.1, 10}
**.producerLow.serviceMean = ${0.1, 10}
**.producerHigh.serviceMean = ${0.1, 10}

# -------------------------------------------Verification--------------------------------------------


# Degeneracy
[Config Degeneracy_test1] 
# The simulation doesn't stop because we remain in t=0s always because the interarrival time is 0s,
# but the jobs in the HQ are instantly processed because the service time is 0s
**.arrivalDistribution = 0
**.serviceDistribution = 0
**.producerLow.arrivalMean = 0
**.producerHigh.arrivalMean = 0
**.producerLow.serviceMean = 0
**.producerHigh.serviceMean = 0

[Config Degeneracy_test2]
# The simulation doesn't stop because we remain in t=0s always because the interarrival time is 0s,
# but the jobs are never processed because the interarrival time is 0s and the service time is 0.1s
**.arrivalDistribution = 0
**.serviceDistribution = 0
**.producerLow.arrivalMean = 0
**.producerHigh.arrivalMean = 0
**.producerLow.serviceMean = 0.1
**.producerHigh.serviceMean = 0.1

[Config Degeneracy_test3]
# The simulation ends as expected, since there is an interrarrival time of 0.1s 
# Both the Low and High jobs are processed, since they have a service time of 0s that is less than the interarrival time
# The High jobs are processed before the Low jobs because the preemption
**.arrivalDistribution = 0
**.serviceDistribution = 0
**.producerLow.arrivalMean = 0.1
**.producerHigh.arrivalMean = 0.1
**.producerLow.serviceMean = 0
**.producerHigh.serviceMean = 0


# Consistency 
[Config Consistency_Constant_1]

# Case 1: SML=0.1, SMH=0.1
# 	RTL=0.12, RTH=0.1
#   The RTH is equal to the SMH, the RTL is higher because of the preemption

# Case 2: SML=0.2, SMH=0.1
# 	RTL=0.22, RTH=0.1
# 	The RTH is equal to the SMH, the RTL is higher than in Case 1, as expected because of the higher SML

# Case 3: SML=0.1, SMH=0.2
#	RTL=0.14, RTH=0.2
#	The RTH is equal to the SMH, the RTL is higher than in Case 1, because of the preemption and the higher SMH

# Case 4: SML=0.2, SMH=0.2
# 	RTL=0.24, RTH=0.2
#	The RTH is equal to the SMH
#	The RTL and the RTH are approximately twice the values in Case 1 as expected because of the doubling in both SML and SMH
#	The RTL is higher than in Case 3, because of the increment in SML

**.arrivalDistribution = 0
**.serviceDistribution = 0
**.producerLow.arrivalMean = 1
**.producerHigh.arrivalMean = 4
**.producerLow.serviceMean = ${0.1, 0.2}
**.producerHigh.serviceMean = ${0.1, 0.2}

[Config Consistency_Exponential_1]

# Case 1: SML=0.1, SMH=0.1
# 	RTL=0.11, RTH=0.08

# Case 2: SML=0.2, SMH=0.1
# 	RTL=0.25, RTH=0.08

# Case 3: SML=0.1, SMH=0.2
#	RTL=0.11, RTH=0.16

# Case 4: SML=0.2, SMH=0.2
# 	RTL=0.26, RTH=0.16

# The results are approximately equal to the Constant Cases, as expected

**.arrivalDistribution = 1
**.serviceDistribution = 1
**.producerLow.arrivalMean = 1
**.producerHigh.arrivalMean = 4
**.producerLow.serviceMean = ${0.1, 0.2} 
**.producerHigh.serviceMean = ${0.1, 0.2}

[Config Consistency_Constant_2]

# Case 1: AML=1, AMH=4
# 	RTL=0.12, RTH=0.1
#   The RTH is equal to the SMH, the RTL is higher because of the preemption

# Case 2: AML=2, AMH=4
# 	RTL=0.14, RTH=0.1
#	The RTL is higher than in Case 1 because the preemption is executed on higher percentage of Low Jobs

# Case 3: AML=1, AMH=8
#	RTL=0.11, RTH=0.1
# 	The RTL is lower than in Case 1 because High Jobs are less frequent 

# Case 4: AML=2, AMH=8
# 	RTL=0.12, RTH=0.1
#	RTL is approximately equal to the one in Case 1, because both the AML and the AMH have been doubled. 
#	RTL is higher than in Case 3 because the preemption is executed on higher percentage of Low Jobs

**.arrivalDistribution = 0
**.serviceDistribution = 0
**.producerLow.arrivalMean = ${1,2}
**.producerHigh.arrivalMean = ${4,8}
**.producerLow.serviceMean = 0.1
**.producerHigh.serviceMean = 0.1

[Config Consistency_Exponential_2]

# Case 1: AML=1, AMH=4
# 	RTL=0.11, RTH=0.08

# Case 2: AML=2, AMH=4
# 	RTL=0.10, RTH=0.08

# Case 3: AML=1, AMH=8
#	RTL=0.10, RTH=0.08

# Case 4: AML=2, AMH=8
# 	RTL=0.10, RTH=0.08

**.arrivalDistribution = 1
**.serviceDistribution = 1
**.producerLow.arrivalMean = ${1,2}
**.producerHigh.arrivalMean = ${4,8}
**.producerLow.serviceMean = 0.1
**.producerHigh.serviceMean = 0.1

[Config Consistency_New]
**.arrivalDistribution = 1
**.serviceDistribution = 1
**.producerLow.arrivalMean = 1
**.producerHigh.arrivalMean = 2
**.producerLow.serviceMean = 0.2
**.producerHigh.serviceMean = 0.2

[Config Consistency_New2]
**.arrivalDistribution = 1
**.serviceDistribution = 1
**.producerLow.arrivalMean = 0.5
**.producerHigh.arrivalMean = 1
**.producerLow.serviceMean = 0.1
**.producerHigh.serviceMean = 0.1

# Continuity
[Config Continuity_Constant]
**.arrivalDistribution = 0
**.serviceDistribution = 0
**.producerLow.arrivalMean = ${1, 1.1}
**.producerHigh.arrivalMean = ${3, 3.1}
**.producerLow.serviceMean = ${1, 1.1}
**.producerHigh.serviceMean = ${1, 1.1}

[Config Continuity_Exponential]
**.arrivalDistribution = 1
**.serviceDistribution = 1
**.producerLow.arrivalMean = ${1, 1.1}
**.producerHigh.arrivalMean = ${3, 3.1}
**.producerLow.serviceMean = ${1, 1.1}
**.producerHigh.serviceMean = ${1, 1.1}

#Monotonicity
[Config Monotonicity_Exponential]
**.arrivalDistribution = 1
**.serviceDistribution = 1
**.producerLow.arrivalMean = 0.1
**.producerHigh.arrivalMean = ${0.11, 0.12, 0.13, 0.14, 0.15}
**.producerLow.serviceMean = 0.1
**.producerHigh.serviceMean = 0.1



